name: DAST with OWASP ZAP

on:
  push:

env:
  IMAGE_NAME: ghcr.io/nus-iss-projects/flight-backend/flightbackend
  AMADEUS_API_KEY: ${{ secrets.AMADEUS_API_KEY }}
  AMADEUS_API_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
  DATA: ${{ secrets.GOOGLE_SERVICES_JSON }}

jobs:
  setup-build-deploy:
    name: Setup, Build, and Store Artifact
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 17
      - name: Retrieve firebase credentials
        run: |
          echo $DATA | base64 -d > app/google-services.json
          if [ ! -f "app/google-services.json" ]; then
            echo "Error: Firebase credentials file not found."
            exit 1
          fi    
      - run: mvn clean install --batch-mode --errors --fail-at-end
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: flightsearch-0.0.1-SNAPSHOT.jar
          path: target/

  build-docker-image:
    name: Dockerize and push to GitHub Container Registry
    needs: setup-build-deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v2
      - name: Set build date as image tag
        id: set_tag
        run: |
          echo "IMAGE_TAG=$(date +'%Y%m%d%H%M%S')-dast" >> $GITHUB_ENV
          echo "::set-output name=image_tag::$(date +'%Y%m%d%H%M%S')-dast"
      - name: Retrieve saved jar
        uses: actions/download-artifact@v2
        with:
          name: flightsearch-0.0.1-SNAPSHOT.jar
          path: target/
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1
      - name: Build and push Docker image
        env:
          USERNAME: ${{ secrets.GITHUB_USERNAME }}
          PASSWORD: ${{ secrets.GITHUB_PASSWORD }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
          docker build --tag ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.image_tag }} .
          docker push ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.image_tag }}

  perform_dast_scan:
    needs: build-docker-image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      packages: write
    steps:
      - name: Pull Docker image
        env:
          USERNAME: ${{ secrets.GITHUB_USERNAME }}
          PASSWORD: ${{ secrets.GITHUB_PASSWORD }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
          docker pull ${{ env.IMAGE_NAME }}:${{ needs.build-docker-image.outputs.image_tag }}
      - name: Run Docker container
        run: docker run -d -p 8888:8888 --name myapp ${{ env.IMAGE_NAME }}:${{ needs.build-docker-image.outputs.image_tag }}
      - name: Pull OWASP ZAP Docker image
        run: docker pull owasp/zap2docker-stable:latest
      - name: OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.6.0
        with:
          target: 'http://localhost:8888'
          docker_name: 'owasp/zap2docker-stable:latest'
          cmd_options: '-t http://localhost:8888 -r zap_report.html'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue_title: 'ZAP Scan Baseline Report'
          fail_action: false
          allow_issue_writing: true
      

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: zap_report.html
